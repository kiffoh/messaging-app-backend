#!/usr/bin/env node

var { app, messagesRouter } = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const { Server } = require('socket.io');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

// Initialize socket.io server
const io = new Server(server, {
  cors: {
    origin: 'http://localhost:5173',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
  },
});

// Set up basic socket connection
io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Listen for message updates
  socket.on('messageUpdated', (updatedMessage) => {
    io.emit('messageUpdated', updatedMessage); // Broadcast to all clients
  });

  // Handle message deletion
  socket.on('messageDeleted', (deletedMessageId) => {
    io.emit('messageDeleted', deletedMessageId); // Broadcast to all clients
  });

  // Disconnect event
  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// Configure messages routes with io
app.use('/messages', messagesRouter(io));

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}